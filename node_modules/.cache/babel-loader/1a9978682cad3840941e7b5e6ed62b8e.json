{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Travis\\\\projects\\\\Thinkful\\\\react\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Study.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck, listCards, readCard } from \"../utils/api/index\";\nimport BreadCrumbNav from \"./BreadCrumbNav\";\nimport StudyCard from \"./StudyCard\";\n\nfunction Study() {\n  const {\n    deckId\n  } = useParams();\n  const [studyDeck, setStudyDeck] = useState([]);\n  const [cards, setCards] = useState([{\n    front: \"front\",\n    back: \"back\"\n  }]);\n  const [cardNum, setCardNum] = useState(1);\n  const [cardText, setCardText] = useState(\"front\");\n  const [cardTotal, setCardTotal] = useState(0);\n  const [onBack, setOnBack] = useState(false);\n\n  const flip = e => {\n    if (cardText === cards[cardNum - 1].front) {\n      setCardText(text => text = cards[cardNum - 1].back);\n      setOnBack(bool => bool = true);\n    } else {\n      setCardText(text => text = cards[cardNum - 1].front);\n    }\n  };\n\n  const next = e => {\n    setCardText(text => text = cards[cardNum].front);\n    setCardNum(num => num < cards.length ? num + 1 : num + 0);\n    setOnBack(bool => bool = false);\n    document.getElementById('nextBtn').style.display = \"none\";\n  };\n\n  useEffect(() => {\n    setCardTotal(cards.length);\n    setCardText(cards[cardNum - 1].front);\n  }, [cards]);\n  useEffect(() => {\n    const fetchDeck = async () => setStudyDeck(await readDeck(deckId));\n\n    fetchDeck();\n\n    const fetchCards = async () => setCards(await listCards(deckId));\n\n    fetchCards();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BreadCrumbNav, {\n    link: `/decks/${deckId}`,\n    linkName: studyDeck.name,\n    pageName: 'Study',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, \"Study: \", studyDeck.name)), /*#__PURE__*/React.createElement(StudyCard, {\n    cardText: cardText,\n    onBack: onBack,\n    cardNum: cardNum,\n    setCardNum: setCardNum,\n    cardTotal: cardTotal,\n    next: next,\n    flip: flip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Study;","map":{"version":3,"sources":["C:/Users/Travis/projects/Thinkful/react/Project_Flashcards_Qualified_1/src/Layout/Study.js"],"names":["React","useState","useEffect","useParams","readDeck","listCards","readCard","BreadCrumbNav","StudyCard","Study","deckId","studyDeck","setStudyDeck","cards","setCards","front","back","cardNum","setCardNum","cardText","setCardText","cardTotal","setCardTotal","onBack","setOnBack","flip","e","text","bool","next","num","length","document","getElementById","style","display","fetchDeck","fetchCards","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck, listCards, readCard } from \"../utils/api/index\";\r\nimport BreadCrumbNav from \"./BreadCrumbNav\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nfunction Study() {\r\n    const { deckId } = useParams();\r\n    const [studyDeck, setStudyDeck] = useState([]);\r\n    const [cards, setCards] = useState([{ front: \"front\", back: \"back\" }]);\r\n    const [cardNum, setCardNum] = useState(1);\r\n    const [cardText, setCardText] = useState(\"front\");\r\n    const [cardTotal, setCardTotal] = useState(0);\r\n    const [onBack, setOnBack] = useState(false);\r\n\r\n    const flip = (e) => {\r\n        if (cardText === cards[cardNum - 1].front) {\r\n            setCardText(text => text = cards[cardNum - 1].back)\r\n            setOnBack(bool => bool = true);\r\n        }\r\n        else {\r\n            setCardText(text => text = cards[cardNum - 1].front)\r\n        }\r\n    }\r\n\r\n    const next = (e) => {\r\n        setCardText(text => text = cards[cardNum].front);\r\n        setCardNum(num => num < cards.length ? num + 1 : num + 0);\r\n        setOnBack(bool => bool = false);\r\n\r\n        document.getElementById('nextBtn').style.display = \"none\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCardTotal(cards.length);\r\n        setCardText(cards[cardNum - 1].front);\r\n    }, [cards]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDeck = async () => setStudyDeck(await readDeck(deckId));\r\n        fetchDeck();\r\n\r\n        const fetchCards = async () => setCards(await listCards(deckId));\r\n        fetchCards();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <BreadCrumbNav link={`/decks/${deckId}`} linkName={studyDeck.name} pageName={'Study'} />\r\n            <div className=\"row\">\r\n                <h1>Study: {studyDeck.name}</h1>\r\n            </div>\r\n            <StudyCard cardText={cardText} onBack={onBack} cardNum={cardNum} setCardNum={setCardNum} cardTotal={cardTotal} next={next} flip={flip} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Study;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Travis\\\\projects\\\\Thinkful\\\\react\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Study.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck, listCards, readCard } from \"../utils/api/index\";\nimport BreadCrumbNav from \"./BreadCrumbNav\";\nimport StudyCard from \"./StudyCard\";\n\nfunction Study() {\n  const {\n    deckId\n  } = useParams();\n  const [studyDeck, setStudyDeck] = useState([]);\n  const [cards, setCards] = useState([{\n    front: \"front\"\n  }]);\n  const [cardId, setCardId] = useState(0);\n  const [cardNum, setCardNum] = useState(1);\n  const [cardText, setCardText] = useState(front);\n  const [cardTotal, setCardTotal] = useState(0);\n\n  const flip = e => {\n    if (cardText === front) {\n      setCardText(text => text = back);\n    } else {\n      setCardText(text => text = front);\n    }\n  };\n\n  const next = e => {\n    setCardNum(num => num < cards.length ? num + 1 : num + 0);\n    setCardText(text => text = front);\n    document.getElementById('nextBtn').style.display = \"none\";\n  };\n\n  useEffect(() => {\n    setCardTotal(cards.length);\n    setCardText(cards[0].front);\n  }, [cards]);\n  useEffect(() => {\n    const fetchDeck = async () => setStudyDeck(await readDeck(deckId));\n\n    fetchDeck();\n\n    const fetchCards = async () => setCards(await listCards(deckId));\n\n    fetchCards();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BreadCrumbNav, {\n    link: `/decks/${deckId}`,\n    linkName: studyDeck.name,\n    pageName: 'Study',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"Study: \", studyDeck.name)), /*#__PURE__*/React.createElement(StudyCard, {\n    cards: cards,\n    cardNum: cardNum,\n    setCardNum: setCardNum,\n    cardId: cardId,\n    cardTotal: cardTotal,\n    next: next,\n    flip: flip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default Study;","map":{"version":3,"sources":["C:/Users/Travis/projects/Thinkful/react/Project_Flashcards_Qualified_1/src/Layout/Study.js"],"names":["React","useState","useEffect","useParams","readDeck","listCards","readCard","BreadCrumbNav","StudyCard","Study","deckId","studyDeck","setStudyDeck","cards","setCards","front","cardId","setCardId","cardNum","setCardNum","cardText","setCardText","cardTotal","setCardTotal","flip","e","text","back","next","num","length","document","getElementById","style","display","fetchDeck","fetchCards","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck, listCards, readCard } from \"../utils/api/index\";\r\nimport BreadCrumbNav from \"./BreadCrumbNav\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nfunction Study() {\r\n    const { deckId } = useParams();\r\n    const [studyDeck, setStudyDeck] = useState([]);\r\n    const [cards, setCards] = useState([{ front: \"front\" }]);\r\n    const [cardId, setCardId] = useState(0);\r\n    const [cardNum, setCardNum] = useState(1);\r\n    const [cardText, setCardText] = useState(front);\r\n    const [cardTotal, setCardTotal] = useState(0);\r\n\r\n    const flip = (e) => {\r\n        if (cardText === front) {\r\n            setCardText(text => text = back)\r\n        }\r\n        else {\r\n            setCardText(text => text = front)\r\n        }\r\n    }\r\n\r\n    const next = (e) => {\r\n        setCardNum(num => num < cards.length ? num + 1 : num + 0);\r\n        setCardText(text => text = front)\r\n        document.getElementById('nextBtn').style.display = \"none\";\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCardTotal(cards.length);\r\n        setCardText(cards[0].front);\r\n    }, [cards]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchDeck = async () => setStudyDeck(await readDeck(deckId));\r\n        fetchDeck();\r\n\r\n        const fetchCards = async () => setCards(await listCards(deckId));\r\n        fetchCards();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <BreadCrumbNav link={`/decks/${deckId}`} linkName={studyDeck.name} pageName={'Study'} />\r\n            <div className=\"row\">\r\n                <h1>Study: {studyDeck.name}</h1>\r\n            </div>\r\n            <StudyCard cards={cards} cardNum={cardNum} setCardNum={setCardNum} cardId={cardId} cardTotal={cardTotal} next={next} flip={flip}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Study;"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["utils/api/index.js","Layout/Common/Header.js","Layout/Deck/DeckCard.js","Layout/Deck/Decks.js","Layout/Home.js","Layout/Card/Card.js","Layout/Card/Cards.js","Layout/Common/BreadCrumbNav.js","Layout/Deck/DeckInfoCard.js","Layout/Buttons/NextButton.js","Layout/Buttons/ResetButton.js","Layout/Deck/StudyCard.js","Layout/Deck/StudyNotEnoughCards.js","Layout/Deck/Study.js","Layout/Card/CardForm.js","Layout/Card/AddCard.js","Layout/Deck/EditDeck.js","Layout/Deck/Deck.js","Layout/Deck/NewDeck.js","Layout/Card/EditCard.js","Layout/Common/NotFound.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","deleteCard","append","Header","className","DeckCard","index","setDecks","handleDeleteDeck","e","window","confirm","target","getAttribute","parentNode","fetchDecks","key","to","length","description","aria-label","class","data-index","onClick","Decks","decks","content","setCards","map","Home","useEffect","Card","front","back","handleDeleteCard","Cards","useParams","history","useHistory","useState","setDeck","abortController","AbortController","fetchDeck","abort","push","BreadCrumbNav","pageName","link","linkName","DeckInfoCard","NextButton","next","ResetButton","reset","StudyCard","cardText","onBack","onEnd","cardNum","cardTotal","flip","StudyNotEnoughCards","cardLength","Study","setCardNum","setCardText","setCardTotal","setOnBack","setOnEnd","undefined","text","num","bool","CardForm","onSubmit","handleFrontChange","handleBackChange","setCard","fetchCard","htmlFor","type","required","onChange","defaultValue","placeholder","AddCard","setFront","setBack","preventDefault","createCard","value","EditDeck","deckName","setDeckName","deckDescrip","setDeckDescrip","changed","setChanged","handleNameChange","handleDescripChange","updateDeck","onLoad","Deck","path","NewDeck","newDeckName","setNewDeckName","newDeckDesc","setNewDeckDesc","createDeck","EditCard","updateCard","NotFound","Layout","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57b7f131.chunk.js","sourcesContent":["/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\nasync function fetchJson(url, options) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listCards(deckId, signal) {\r\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal });\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron mb-2\">\r\n      <div className=\"container text-white\">\r\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\r\n        <p className=\"lead ml-3\">Discover The Flashcard Difference.</p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteDeck, listDecks } from \"../../utils/api/index\";\r\n\r\nfunction DeckCard({ deck = {}, index, setDecks }) {\r\n    const handleDeleteDeck = async (e) => {\r\n        if (window.confirm('Delete this deck?')) {\r\n            if (e.target.getAttribute(\"data-index\") === null)\r\n                await deleteDeck(e.target.parentNode.getAttribute(\"data-index\"));\r\n            else\r\n                await deleteDeck(e.target.getAttribute(\"data-index\"));\r\n        }\r\n        const fetchDecks = async () => setDecks(await listDecks())\r\n        fetchDecks();\r\n    }\r\n\r\n    return (<div key={index} className=\"row text-center d-flex justify-content-center mt-2 mb-2\">\r\n        <div className=\"card w-100\" >\r\n            <div className=\"card-body\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <h5 className=\"card-title\">{deck.name}</h5>\r\n                    <Link to={`/decks/${deck.id}`}><h6 className=\"text-info\">{deck.cards.length} cards</h6></Link>\r\n                </div>\r\n                <p className=\"card-text\">{deck.description}</p>\r\n\r\n                {/* Clicking the View button brings the user to the Edit Deck screen */}\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div>\r\n                        <Link to={`decks/${deck.id}`}>\r\n                            <button className=\"btn btn-secondary mr-1\" aria-label=\"Left Align\">\r\n                                <i class=\"bi bi-eye\"></i> View\r\n                            </button>\r\n                        </Link>\r\n\r\n                        {/* Clicking the Study button brings the user to the Study screen */}\r\n                        <Link to={`decks/${deck.id}/study`}>\r\n                            <button className=\"btn btn-primary\">\r\n                                <i class=\"bi bi-book\"></i> Study\r\n                             </button>\r\n                        </Link>\r\n                    </div>\r\n\r\n                    {/* Clicking the Delete button shows a warning message before deleting the deck */}\r\n                    <button data-index={deck.id} className=\"btn btn-danger\" onClick={handleDeleteDeck}>\r\n                        <i data-index={deck.id} class=\"bi bi-trash-fill\"></i> Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default DeckCard;","import React from \"react\";\r\nimport DeckCard from \"./DeckCard\";\r\n\r\nfunction Decks({ decks=[], setDecks, cards, setCards }) {\r\n  const content = decks.map((deck, index) => {\r\n    return (<DeckCard deck={deck} cards={cards} index={index} setDecks={setDecks} />);\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {content}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Decks;","import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { listDecks } from \"../utils/api/index\";\r\nimport Decks from \"./Deck/Decks\";\r\n\r\nfunction Home({ decks, setDecks, cards, setCards }) {\r\n    useEffect(() => {\r\n        const fetchDecks = async () => setDecks(await listDecks());\r\n        fetchDecks();\r\n    }, [setDecks]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                {/* Create Deck Button brings the user to the Create Deck Screen */}\r\n                <Link to=\"/decks/new\">\r\n                    <button className=\"btn btn-secondary\">\r\n                        <i class=\"bi bi-plus\"></i> Create Deck\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n            <Decks decks={decks} cards={cards} setDecks={setDecks} setCards={setCards} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Card({ card = { front: \"front\", back: \"back\" }, index, handleDeleteCard }) {\r\n    return (<>\r\n        <div key={index} className=\"row text-center d-flex justify-content-center mt-2 mb-2\">\r\n            <div className=\"card w-100\">\r\n                <div className=\"card-body row\">\r\n                    <p className=\"card-text col-6\">{card.front}</p>\r\n                    <p className=\"card-text col-6\">{card.back}</p>\r\n                </div>\r\n                {/* Clicking the View button brings the user to the Edit Deck screen */}\r\n                <div className=\"d-flex justify-content-end\">\r\n                    <div>\r\n                        <Link to={`/decks/${card.deckId}/cards/${card.id}/edit`}>\r\n                            <button className=\"btn btn-secondary mr-1\">\r\n                                <i class=\"bi bi-pencil-square\"></i> Edit\r\n                            </button>\r\n                        </Link>\r\n\r\n                        {/* Clicking the Delete button shows a warning message before deleting the deck */}\r\n                        <button data-index={card.id} className=\"btn btn-danger\" onClick={handleDeleteCard}>\r\n                            <i data-index={card.id} class=\"bi bi-trash-fill\"></i> Delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>);\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport Card from \"./Card\";\r\nimport { deleteCard, readDeck } from \"../../utils/api/index\";\r\n\r\nfunction Cards() {\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n    let content = [\"\"];\r\n\r\n    const [deck, setDeck] = useState({})\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId, abortController.signal));\r\n        fetchDeck();\r\n        return () => abortController.abort();\r\n    }, [deckId])\r\n\r\n    const handleDeleteCard = async (e) => {\r\n        if (window.confirm('Delete this card?')) {\r\n            if (e.target.getAttribute(\"data-index\") !== null)\r\n                await deleteCard(e.target.getAttribute(\"data-index\"));\r\n            else{\r\n                window.confirm('something went wrong.')\r\n                history.push(`/`);\r\n            }\r\n            const fetchDeck = async () => setDeck(await readDeck(deckId));\r\n            fetchDeck();\r\n        }\r\n    }\r\n\r\n    if (deck.id)\r\n        content = deck.cards.map((card, index) => {\r\n            return (<Card card={card} index={index} handleDeleteCard={handleDeleteCard} />);\r\n        });\r\n    return (<>\r\n        <div className=\"row mt-3\">\r\n            <h3>Cards</h3>\r\n        </div>\r\n        {deck.cards ? content : null}\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Cards;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction BreadCrumbNav({ pageName = \"Page Name\", link = \"\", linkName = \"\", }) {\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <Link className=\"m-1\" to=\"/\"><i class=\"bi bi-house m-1\"></i>Home</Link>\r\n                {link !== \"\" ? <p className=\"m-1 text-info\">/</p> : \"\"}\r\n                <Link className={link !== \"\" ? \"m-1\" : \"\"} to={link}>{linkName}</Link>\r\n                <p className=\"m-1 text-info\">/ {pageName}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BreadCrumbNav;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport BreadCrumbNav from \"../Common/BreadCrumbNav\";\r\n\r\nfunction DeckInfoCard({ deck, deckId, handleDeleteDeck }) {\r\n    return (\r\n        <>\r\n            <BreadCrumbNav pageName={deck.name} />\r\n            <div className=\"row text-center d-flex justify-content-center mt-1\">\r\n                <div className=\"w-100\">\r\n                    <div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <h4>{deck.name}</h4>\r\n                        </div>\r\n                        <p className=\"card-text\">{deck.description}</p>\r\n\r\n                        {/* Clicking the View button brings the user to the Edit Deck screen */}\r\n                        <div className=\"d-flex justify-content-between\">\r\n                            <div>\r\n                                <Link to={`/decks/${deckId}/edit`}>\r\n                                    <button className=\"btn btn-secondary mr-1\">\r\n                                        <i class=\"bi bi-pencil-square\"></i> Edit\r\n                                    </button>\r\n                                </Link>\r\n\r\n                                {/* Clicking the Study button brings the user to the Study screen */}\r\n                                <Link to={`/decks/${deckId}/study`}>\r\n                                    <button className=\"btn btn-primary mr-1\">\r\n                                        <i class=\"bi bi-book\"></i> Study\r\n                                     </button>\r\n                                </Link>\r\n                                {/* Clicking the Study button brings the user to the Study screen */}\r\n                                <Link to={`/decks/${deckId}/cards/new`}>\r\n                                    <button className=\"btn btn-primary\">\r\n                                        <i class=\"bi bi-plus\"></i> Add Card\r\n                                     </button>\r\n                                </Link>\r\n                            </div>\r\n\r\n                            {/* Clicking the Delete button shows a warning message before deleting the deck */}\r\n                            <button data-index={deckId} className=\"btn btn-danger\" onClick={handleDeleteDeck}>\r\n                                <i class=\"bi bi-trash-fill\"></i> Delete\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default DeckInfoCard;","import React from \"react\";\r\n\r\nfunction NextButton({ next }) {\r\n    return (\r\n        <>\r\n            <div id=\"nextBtn\" className=\"justify-content-center mt-1 btn btn-primary ml-2 mb-3\" onClick={next}>\r\n                Next\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NextButton;","import React from \"react\";\r\n\r\nfunction ResetButton({ reset }) {\r\n    return (\r\n        <>\r\n            <div id=\"resetBtn\" className=\"justify-content-center mt-1 btn btn-primary ml-2 mb-3\" onClick={reset}>\r\n                Reset\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ResetButton;","import React from \"react\";\r\nimport NextButton from \"../Buttons/NextButton\";\r\nimport ResetButton from \"../Buttons/ResetButton\";\r\n\r\nfunction StudyCard({ cardText, onBack, onEnd, cardNum, cardTotal, next, flip, reset }) {\r\n    return (\r\n        <>\r\n            <div className=\"row d-flex justify-content-center mt-1 w-100\">\r\n                <div id=\"flashCard\" className=\"card m-1 p-5\">\r\n                    <div className=\"card-body row text-center\">\r\n                        <h3 className=\"card-text col-12\" >{cardText}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <h6 className=\"card-text d-flex justify-content-center mb-3\">{`Card ${cardNum} of ${cardTotal}`}</h6>\r\n                </div>\r\n                <div id=\"flipBtn\" className=\"d-flex justify-content-center mt-1 btn btn-secondary mb-3\" onClick={flip}>\r\n                    Flip\r\n                </div>\r\n                {onBack ? <NextButton next={next} /> : null}{onEnd ? <ResetButton reset={reset} /> : null}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default StudyCard;","import React from \"react\";\r\n\r\nexport default function StudyNotEnoughCards({ cardLength = 0 }) {\r\n    return (\r\n        <>\r\n            <h4>Not Enough Cards.</h4>\r\n            <p>{`You need at least 3 cards to study. There are ${cardLength} cards in this deck.`}</p>\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport BreadCrumbNav from \"../Common/BreadCrumbNav\";\r\nimport StudyCard from \"./StudyCard\";\r\nimport StudyNotEnoughCards from \"./StudyNotEnoughCards\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nfunction Study() {\r\n    const { deckId } = useParams();\r\n    const [cardNum, setCardNum] = useState(1);\r\n    const [cardText, setCardText] = useState(\"front\");\r\n    const [cardTotal, setCardTotal] = useState(0);\r\n    const [onBack, setOnBack] = useState(false);\r\n    const [onEnd, setOnEnd] = useState(false);\r\n    const [deck, setDeck] = useState([{}]);\r\n\r\n    const flip = (e) => {\r\n        if (deck.cards) {\r\n            if (cardText === deck.cards[cardNum - 1].front) {\r\n                setCardText(text => text = deck.cards[cardNum - 1].back)\r\n                if (cardNum !== cardTotal)\r\n                    setOnBack(bool => bool = true);\r\n                else\r\n                    setOnEnd(bool => bool = true);\r\n            }\r\n            else {\r\n                setCardText(text => text = deck.cards[cardNum - 1].front)\r\n            }\r\n        }\r\n    }\r\n\r\n    const next = (e) => {\r\n        if (deck.cards) {\r\n            setCardText(text => text = deck.cards[cardNum].front);\r\n            setCardNum(num => num < deck.cards.length ? num + 1 : num + 0);\r\n            setOnBack(bool => bool = false);\r\n        }\r\n    }\r\n\r\n    const reset = (e) => {\r\n        if (deck.cards) {\r\n            setCardText(text => text = deck.cards[0].front);\r\n            setCardNum(num => num = 1);\r\n            setOnBack(bool => bool = false);\r\n            setOnEnd(bool => bool = false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId, abortController.signal));\r\n        fetchDeck()\r\n\r\n        return () => abortController.abort();\r\n    }, [deckId]);\r\n\r\n    useEffect(() => {\r\n        if (deck.cards) {\r\n            setCardTotal(deck.cards.length);\r\n            if (deck.cards[cardNum - 1])\r\n                setCardText(deck.cards[cardNum - 1].front);\r\n            else\r\n                setCardText(\"\");\r\n        }\r\n    }, [deck, cardNum]);\r\n\r\n    if (deck.cards !== undefined)\r\n        return (\r\n            <>\r\n                <BreadCrumbNav link={`/decks/${deckId}`} linkName={deck.name} pageName={'Study'} />\r\n                <div className=\"row\">\r\n                    <h2>Study: {deck.name}</h2>\r\n                </div>\r\n                { cardTotal > 2 ? <StudyCard cardText={cardText} onBack={onBack} onEnd={onEnd} cardNum={cardNum} setCardNum={setCardNum} cardTotal={cardTotal} next={next} flip={flip} reset={reset} /> : <StudyNotEnoughCards cardLength={cardTotal} />}\r\n            </>\r\n        );\r\n    else\r\n        return null;\r\n}\r\n\r\nexport default Study;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { readCard } from \"../../utils/api/index\";\r\n\r\nexport default function CardForm({ onSubmit, handleFrontChange, handleBackChange }) {\r\n    const { deckId, cardId } = useParams();\r\n    const [card, setCard] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (cardId) {\r\n            const fetchCard = async () => setCard(await readCard(cardId));\r\n            fetchCard();\r\n        }\r\n    }, [cardId, deckId]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <form className=\"row\" onSubmit={onSubmit}>\r\n                <div className=\"form-group w-100\">\r\n                    <label className=\"font-weight-bold\" htmlFor=\"deck-description\">Front</label>\r\n                    <textarea type=\"text\" required className=\"form-control\" onChange={handleFrontChange} defaultValue={card.front ? card.front : \"\"} placeholder={\"Front side of card\"} />\r\n                </div>\r\n                <div className=\"form-group w-100\">\r\n                    <label className=\"font-weight-bold\" htmlFor=\"deck-description\">Back</label>\r\n                    <textarea type=\"text\" required className=\"form-control\" onChange={handleBackChange} defaultValue={card.back ? card.back : \"\"} placeholder={\"Back side of card\"} />\r\n                </div>\r\n                <Link to={`/decks/${deckId}`}><button className=\"btn btn-secondary mr-2\">Done</button></Link>\r\n                <button className=\"btn btn-primary\" type=\"submit\">Save</button>\r\n            </form>\r\n        </>\r\n    );\r\n\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { readDeck, createCard } from \"../../utils/api/index\";\r\nimport BreadCrumbNav from \"../Common/BreadCrumbNav\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nfunction AddCard() {\r\n    const { deckId, cardId } = useParams();\r\n    const [deck, setDeck] = useState(\"\");\r\n    const [front, setFront] = useState(\"\");\r\n    const [back, setBack] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const handleAddCard = (e) => {\r\n        e.preventDefault();\r\n        const newCard = {\r\n            \"front\": front,\r\n            \"back\": back,\r\n            \"deckId\": deckId,\r\n            \"id\": cardId\r\n        };\r\n        createCard(deckId, newCard);\r\n\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId));\r\n        fetchDeck();\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId, abortController.signal));\r\n        fetchDeck();\r\n        return () => abortController.abort();\r\n    }, [deckId, history]);\r\n\r\n    const handleFrontChange = (e) => setFront(e.target.value);\r\n    const handleBackChange = (e) => setBack(e.target.value);\r\n    return (\r\n        <>\r\n            <BreadCrumbNav link={`/decks/${deck.id}`} linkName={deck.name} pageName={\"Add Card\"} />\r\n            <div className=\"row d-flex\">\r\n                <h3 className=\"mr-1\">{deck.name}:</h3><h3>Add Card</h3>\r\n            </div>\r\n            <CardForm onSubmit={handleAddCard} handleFrontChange={handleFrontChange} handleBackChange={handleBackChange}/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCard;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\r\nimport BreadCrumbNav from \"../Common/BreadCrumbNav\";\r\n\r\nfunction EditDeck() {\r\n    const { deckId } = useParams();\r\n    const [deck, setDeck] = useState(\"\");\r\n    const [deckName, setDeckName] = useState(\"\");\r\n    const [deckDescrip, setDeckDescrip] = useState(\"\");\r\n    const [changed, setChanged] = useState(false);\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const handleEditDeck = (e) => {\r\n        e.preventDefault();\r\n        if (changed) {\r\n            const updatedDeck = {\r\n                \"name\": deckName,\r\n                \"description\": deckDescrip,\r\n                \"id\": deckId\r\n            };\r\n            updateDeck(updatedDeck);\r\n            setChanged(bool => bool = false);\r\n        }\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId));\r\n        fetchDeck();\r\n    }, [deckId]);\r\n\r\n    const handleNameChange = (e) => { setDeckName(e.target.value); setChanged(bool => bool = true) }\r\n    const handleDescripChange = (e) => { setDeckDescrip(e.target.value); setChanged(bool => bool = true) }\r\n    return (\r\n        <>\r\n            <BreadCrumbNav link={`/decks/${deck.id}`} linkName={deck.name} pageName={\"Edit Deck\"} />\r\n            <div className=\"row\">\r\n                <h2>Edit Deck</h2>\r\n            </div>\r\n            <form className=\"row\" onSubmit={handleEditDeck}>\r\n                <div className=\"form-group w-100\">\r\n                    <label htmlFor=\"deck-name\">Name</label>\r\n                    <input type=\"text\" required className=\"form-control\" defaultValue={deck.name} onLoad={handleNameChange} onChange={handleNameChange} />\r\n                </div>\r\n                <div className=\"form-group w-100\">\r\n                    <label htmlFor=\"deck-description\">Description</label>\r\n                    <textarea type=\"text\" required className=\"form-control\" defaultValue={deck.description} onLoad={handleDescripChange} onChange={handleDescripChange} />\r\n                </div>\r\n                <Link to={`/decks/${deckId}`}><button className=\"btn btn-secondary mr-2\">Cancel</button></Link>\r\n                <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditDeck;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, useParams, useHistory } from \"react-router-dom\";\r\nimport { deleteDeck, readDeck } from \"../../utils/api/index\";\r\nimport Cards from \"../Card/Cards\";\r\nimport DeckInfoCard from \"./DeckInfoCard\";\r\nimport Study from \"./Study\";\r\nimport AddCard from \"../Card/AddCard\";\r\nimport EditDeck from \"./EditDeck\";\r\n\r\nfunction Deck() {\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n\r\n    const [deck, setDeck] = useState([{}]);\r\n\r\n    const handleDeleteDeck = async (e) => {\r\n        if (window.confirm('Delete this deck?')) {\r\n            await deleteDeck(e.target.getAttribute(\"data-index\"));\r\n            history.push(\"/\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const abortController = new AbortController();\r\n\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId, abortController.signal));\r\n        fetchDeck();\r\n        return () => abortController.abort();\r\n    }, [deckId]);\r\n\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route path=\"/decks/:deckId/cards/new\">\r\n                    <AddCard />\r\n                </Route>\r\n                <Route path=\"/decks/:deckId/study\">\r\n                    <Study />\r\n                </Route>\r\n                <Route path=\"/decks/:deckId/edit\">\r\n                    <EditDeck />\r\n                </Route>\r\n                <Route path=\"/decks/:deckId\">\r\n                    <DeckInfoCard deck={deck} deckId={deckId} handleDeleteDeck={handleDeleteDeck} />\r\n                    <Cards deckId={deckId} />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\nexport default Deck;","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { createDeck } from \"../../utils/api/index\";\r\nimport BreadCrumbNav from \"../Common/BreadCrumbNav\";\r\n\r\nfunction NewDeck({ decks }) {\r\n    const [newDeckName, setNewDeckName] = useState(\"\");\r\n    const [newDeckDesc, setNewDeckDesc] = useState(\"\");\r\n\r\n    const history = useHistory();\r\n\r\n    const handleCreateDeck = (e) => {\r\n        e.preventDefault();\r\n        const newDeck = { id: decks.length === 0 ? 1 : decks[decks.length-1].id + 1, name: newDeckName, description: newDeckDesc };\r\n        createDeck(newDeck);\r\n        history.push(`/decks/${decks.length === 0 ? 1 : decks[decks.length-1].id + 1}`);\r\n    }\r\n    const handleNameChange = (e) => setNewDeckName(e.target.value);\r\n    const handleDescChange = (e) => setNewDeckDesc(e.target.value);\r\n    return (\r\n        <>\r\n            <BreadCrumbNav pageName={\"Create Deck\"} />\r\n            <div className=\"row\">\r\n                <h2>Create Deck</h2>\r\n            </div>\r\n            <form className=\"row\" onSubmit={handleCreateDeck}>\r\n                <div className=\"form-group w-100\">\r\n                    <label htmlFor=\"deck-name\">Name</label>\r\n                    <input type=\"text\" required className=\"form-control\" onChange={handleNameChange} placeholder=\"Deck Name\" ></input>\r\n                </div>\r\n                <div className=\"form-group w-100\">\r\n                    <label htmlFor=\"deck-description\">Description</label>\r\n                    <textarea required className=\"form-control\" onChange={handleDescChange} placeholder=\"Brief description of the deck\" ></textarea>\r\n                </div>\r\n                <Link to=\"/\"><button className=\"btn btn-secondary mr-2\">Cancel</button></Link>\r\n                <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NewDeck;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { readDeck, readCard, updateCard } from \"../../utils/api/index\";\r\nimport BreadCrumbNav from \"../Common/BreadCrumbNav\";\r\nimport CardForm from \"./CardForm\";\r\n\r\nfunction EditCard() {\r\n    const { deckId, cardId } = useParams();\r\n    const [card, setCard] = useState([])\r\n    const [deck, setDeck] = useState([]);\r\n    const [changed, setChanged] = useState(false);\r\n\r\n    const history = useHistory();\r\n\r\n    const handleEditCard = (e) => {\r\n        e.preventDefault();\r\n        if (changed) {\r\n            const updatedCard = {\r\n                \"front\": front,\r\n                \"back\": back,\r\n                \"deckId\": deckId,\r\n                \"id\": cardId\r\n            };\r\n            updateCard(updatedCard);\r\n            setChanged(bool => bool = false);\r\n        }\r\n        history.push(`/decks/${deckId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchDeck = async () => setDeck(await readDeck(deckId));\r\n        fetchDeck();\r\n        const fetchCard = async () => setCard(await readCard(cardId));\r\n        fetchCard();\r\n    }, [cardId, deckId]);\r\n\r\n    const [front, setFront] = useState(card.front);\r\n    const [back, setBack] = useState(card.back);\r\n\r\n    const handleFrontChange = (e) => { setFront(e.target.value); setChanged(bool => bool = true) };\r\n    const handleBackChange = (e) => { setBack(e.target.value); setChanged(bool => bool = true) };\r\n    return (\r\n        <>\r\n            <BreadCrumbNav link={`/decks/${deck.id}`} linkName={deck.name} pageName={\"Edit Card\"} />\r\n            <div className=\"row\">\r\n                <h3>Edit Card</h3>\r\n            </div>\r\n            <CardForm onSubmit={handleEditCard} handleFrontChange={handleFrontChange} handleBackChange={handleBackChange} />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default EditCard;","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { listDecks } from \"../utils/api/index\";\r\nimport Header from \"./Common/Header\";\r\nimport Home from \"./Home\";\r\nimport Deck from \"./Deck/Deck\";\r\nimport NewDeck from \"./Deck/NewDeck\";\r\nimport EditCard from \"./Card/EditCard\";\r\nimport NotFound from \"./Common/NotFound\";\r\n\r\nfunction Layout() {\r\n  const [decks, setDecks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDecks = async () => setDecks(await listDecks())\r\n    fetchDecks();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route path=\"/\" exact={true}>\r\n            <Home decks={decks} setDecks={setDecks} />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n            <EditCard />\r\n          </Route>\r\n          <Route path=\"/decks/new\">\r\n            <NewDeck decks={decks} setDecks={setDecks} />\r\n          </Route>\r\n          <Route path=\"/decks/:deckId\">\r\n            <Deck decks={decks} />\r\n          </Route>\r\n          <Route> {/* 404 */}\r\n            <NotFound />\r\n          </Route>\r\n        </Switch>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Layout from \"./Layout\";\r\nimport \"./Layout/Styles.css\";\r\n/**\r\n * App is a wrapper for <Layout>, you should not need to change this file.\r\n */\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-routes\">\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Layout />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}